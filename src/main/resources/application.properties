# database init, supports mysql too
database=postgres
spring.sql.init.data-locations[0]=classpath*:db/${database}/data.sql
spring.sql.init.data-locations[1]=classpath*:db/${database}/owners.sql

spring.datasource.url=${POSTGRES_URL:jdbc:postgresql://localhost/petclinic}
spring.datasource.username=${POSTGRES_USER:petclinic}
spring.datasource.password=${POSTGRES_PASS:petclinic}

# SQL is written to be idempotent so this is safe
spring.sql.init.mode=always


# Web
spring.thymeleaf.mode=HTML

# JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=true
spring.jpa.show-sql=true

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true

# Logging
logging.level.org.springframework=INFO
#Flyway configuration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=0
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE


# Maximum time static resources should be cached
spring.web.resources.cache.cachecontrol.max-age=12h
#spring.web.resources.cache.cachecontrol.s-max-age=12h

spring.resources.cache.cachecontrol.cache-private=true
spring.resources.cache.cachecontrol.must-revalidate=true
spring.resources.cache.cachecontrol.max-age=31536000
spring.resources.cache.cachecontrol.s-max-age=31536000

spring.cache.cache-names=owners,owners-with-pets
spring.cache.caffeine.spec=maximumSize=5000,expireAfterWrite=30s
spring.main.allow-circular-references=true

server.http2.enabled=true
server.max-http-request-header-size=1MB
server.compression.enabled=true
#server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/x-javascript,application/x-font-ttf,image/svg+xml,image/gif,image/png,image/jpeg,image/jpg
server.compression.min-response-size=30

logging.level.sql: debug
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
